/*
In the file routes/index.js, add a new endpoint:

    POST /users => UsersController.postNew

Inside controllers, add a file UsersController.js that contains the new endpoint:

POST /users should create a new user in DB:

    To create a user, you must specify an email and a password
    If the email is missing, return an error Missing email with a status code 400
    If the password is missing, return an error Missing password with a status code 400
    If the email already exists in DB, return an error Already exist with a status code 400
    The password must be stored after being hashed in SHA1
    The endpoint is returning the new user with only the email and the id (auto generated by
    MongoDB) with a status code 201
    The new user must be saved in the collection users:
        email: same as the value received
        password: SHA1 value of the value received

*/

import sha1 from 'sha1';
import { ObjectId } from 'mongodb';
import dbClient from '../utils/db';
import redisClient from '../utils/redis';

class UsersController {
  static async postNew(request, response) {
    const { email, password } = request.body;
    if (!email) { return response.status(400).json({ error: 'Missing email' }); }
    if (!password) { return response.status(400).json({ error: 'Missing password' }); }

    const user = await dbClient.db.collection('users').findOne({ email });
    if (user) return response.status(400).json({ error: 'Already exist' });

    const passsha1 = sha1(password);
    await dbClient.db.collection('users').insertOne({ email, password: passsha1 });

    const newUser = await dbClient.db.collection('users').findOne({ email });

    return response.status(201).send({ id: newUser._id, email });
  }

  static async getMe(request, response) {
    const token = request.header('X-token');

    const uid = await redisClient.get(`auth_${token}`);

    if (!uid) return response.status(401).json({ error: 'Unauthorized' });

    const user = await dbClient.db.collection('users').findOne({ _id: ObjectId(uid) });

    return response.json({ email: user.email, id: user._id });
  }
}

export default UsersController;
